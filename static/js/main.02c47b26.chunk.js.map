{"version":3,"sources":["components/EmployeeContext.js","components/SortContext.js","components/FilterContext.js","components/EmployeeTable.js","components/Header.js","App.js","utils/API.js","serviceWorker.js","index.js"],"names":["EmployeeContext","React","createContext","SortContext","FilterContext","name","EmployeeTable","sortBy","employees","useContext","sorts","filterC","console","log","length","className","type","onClick","SortIcon","cat","map","emp","index","nameFilter","first","toLowerCase","includes","key","alt","src","picture","thumbnail","last","location","city","state","country","href","email","Header","onChange","handleInputChange","placeholder","App","useState","event","userInput","target","value","setFilter","filter","setEmployees","setSorts","useEffect","results","URL","axios","get","getRandomUsers","then","res","data","Provider","sortedEmployees","sort","a","b","m","Boolean","window","hostname","match","docWidth","document","documentElement","offsetWidth","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","forEach","call","querySelectorAll","el"],"mappings":"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","file":"static/js/main.02c47b26.chunk.js","sourcesContent":["import React from \"react\";\r\nconst EmployeeContext = React.createContext([]);\r\nexport default EmployeeContext;","import React from \"react\";\r\nconst SortContext = React.createContext([]);\r\nexport default SortContext;","import React from \"react\";\r\nconst FilterContext = React.createContext({ name: \"\" });\r\nexport default FilterContext;","import React, { useContext } from \"react\";\r\nimport EmployeeContext from \"./EmployeeContext\";\r\nimport SortContext from \"./SortContext\";\r\nimport FilterContext from \"./FilterContext\";\r\n\r\nconst EmployeeTable = ({ sortBy }) => {\r\n    const employees = useContext(EmployeeContext);\r\n    const sorts = useContext(SortContext);\r\n    const filterC = useContext(FilterContext);\r\n    console.log(filterC);\r\n    if (employees.length > 0) {\r\n        return (\r\n            <div className=\"container mb-3\">\r\n                {/* Row for labeling columns. Labels are buttons that sort employees by that button's title */}\r\n                <div className=\"employee-table-header\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-1\">\r\n                            {/* Empty Col for proper alignment. The columns aligned with this one on rows below hold thumbnail pictures of employees */}\r\n                        </div>\r\n                        <div className=\"col-2\">\r\n                            <button type=\"button\" className=\"employee-header-button\" onClick={() => sortBy(\"first\")}>\r\n                                First Name <SortIcon cat={\"first\"} />\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-2\">\r\n                            <button type=\"button\" className=\"employee-header-button\" onClick={() => sortBy(\"last\")}>\r\n                                Last Name <SortIcon cat={\"last\"} />\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                            <button type=\"button\" className=\"employee-header-button\" onClick={() => sortBy(\"location\")}>\r\n                                Location <SortIcon cat={\"location\"} />\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"col-3\">\r\n                            <button type=\"button\" className=\"employee-header-button\" onClick={() => sortBy(\"email\")}>\r\n                                Email <SortIcon cat={\"email\"} />\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {\r\n                    employees.map((emp, index) => {\r\n                        if (filterC.nameFilter === \"\" || emp.name.first.toLowerCase().includes(filterC.nameFilter.toLowerCase())) {\r\n                            return (\r\n                                <div className=\"row employee-row\" key={index}>\r\n                                    <div className=\"col-1\">\r\n                                        <img alt=\"\" src={emp.picture.thumbnail}></img>\r\n                                    </div>\r\n                                    <div className=\"col-2\">\r\n                                        {emp.name.first}\r\n                                    </div>\r\n                                    <div className=\"col-2\">\r\n                                        {emp.name.last}\r\n                                    </div>\r\n                                    <div className=\"col-4\">\r\n                                        {emp.location.city}, {emp.location.state}, {emp.location.country}\r\n                                    </div>\r\n                                    <div className=\"col-3\">\r\n                                        <a href={`mailto:${emp.email}`}>{emp.email}</a>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        } else {\r\n                            return null;\r\n                        }\r\n                    })\r\n                }\r\n            </div >\r\n        )\r\n    } else {\r\n        return (\r\n            <div></div>\r\n        )\r\n    }\r\n\r\n    function SortIcon({ cat }) {\r\n        switch (sorts[cat]) {\r\n            case \"asc\": return (<i className=\"fas fa-sort-down\"></i>);\r\n            case \"dec\": return (<i className=\"fas fa-sort-up\"></i>);\r\n            default: return (<i className=\"fas fa-sort\"></i>);\r\n        }\r\n    }\r\n}\r\n\r\nexport default EmployeeTable;","import React, { useContext } from \"react\";\r\nimport FilterContext from \"./FilterContext\";\r\n\r\nconst Header = () => {\r\n    const filterC = useContext(FilterContext);\r\n\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-4\">Employee Directory</h1>\r\n                <p className=\"lead\">Click column titles to sort!</p>\r\n                <input onChange={filterC.handleInputChange} placeholder=\"Filter by Name\" type=\"text\"></input>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { useState, useEffect } from 'react';\nimport getRandomUsers from \"./utils/API\";\nimport EmployeeTable from \"./components/EmployeeTable\";\nimport Header from \"./components/Header\";\nimport EmployeeContext from \"./components/EmployeeContext\";\nimport SortContext from './components/SortContext';\nimport FilterContext from \"./components/FilterContext\";\nimport './App.css';\n\nfunction App() {\n  const [filter, setFilter] = useState({\n    handleInputChange: handleInputChange,\n    nameFilter: \"\"\n  });\n\n  const [employees, setEmployees] = useState([]);\n\n  const [sorts, setSorts] = useState({\n    first: \"unsorted\",\n    last: \"unsorted\",\n    location: \"unsorted\",\n    email: \"unsorted\"\n  });\n\n  useEffect(() => {\n    getRandomUsers(10).then((res) => {\n      setEmployees(res.data.results);\n    });\n  }, []);\n\n  //cat argument is category to sort by\n  function sortBy(cat) {\n    let sortedEmployees = [];\n    sortedEmployees = [...employees].sort((a, b) => {\n      // m is used to flip the sign of return from .sort(). flipping the sign reverses the order\n      let m = 1;\n      if (sorts[cat] === \"asc\") {\n        // if the category is already sorted ascending... flip the sign to sort it as decending and mark this category as sorted decending (\"dec\")\n        m = -1;\n        setSorts({ first: \"unsorted\", last: \"unsorted\", location: \"unsorted\", email: \"unsorted\", [cat]: \"dec\" });\n      } else {\n        // else mark this category as sorted ascending (\"asc\")\n        setSorts({ first: \"unsorted\", last: \"unsorted\", location: \"unsorted\", email: \"unsorted\", [cat]: \"asc\" })\n      }\n      // returning 1 orders a before b, returning -1 orders b before a. a negative \"m\" value reverses that as described above\n      switch (cat) {\n        case \"first\":\n          if (a.name.first > b.name.first) return 1 * m;\n          if (b.name.first > a.name.first) return -1 * m;\n          return 0;\n        case \"last\":\n          if (a.name.last > b.name.last) return 1 * m;\n          if (b.name.last > a.name.last) return -1 * m;\n          return 0;\n        case \"location\":\n          if (a.location.country > b.location.country) return 1 * m;\n          if (b.location.country > a.location.country) return -1 * m;\n          if (a.location.state > b.location.state) return 1 * m;\n          if (b.location.state > a.location.state) return -1 * m;\n          if (a.location.city > b.location.city) return 1 * m;\n          if (b.location.city > a.location.city) return -1 * m;\n          return 0;\n        case \"email\":\n          if (a.email > b.email) return 1 * m;\n          if (b.email > a.email) return -1 * m;\n          return 0;\n        default: return 0;\n      }\n    })\n    // set the sorted array to the main employee array which will be displayed on state change\n    setEmployees(sortedEmployees);\n  }\n\n  // sets a new filter value whenever user types in the input box from ./components/Header.js\n  function handleInputChange(event) {\n    const userInput = event.target.value;\n    setFilter({ ...filter, nameFilter: userInput });\n  }\n\n  return (\n    <div className=\"App\">\n      <EmployeeContext.Provider value={employees}>\n        <SortContext.Provider value={sorts}>\n          <FilterContext.Provider value={filter}>\n            <Header />\n            <EmployeeTable sortBy={sortBy} />\n          </FilterContext.Provider>\n        </SortContext.Provider>\n      </EmployeeContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from \"axios\";\r\n\r\nexport default function getRandomUsers(results = 20) {\r\n    const URL = `https://randomuser.me/api/?results=${results}&?nat=us`;\r\n    return axios.get(URL);\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nvar docWidth = document.documentElement.offsetWidth;\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n[].forEach.call(\n  document.querySelectorAll('*'),\n  function (el) {\n    if (el.offsetWidth > docWidth) {\n      console.log(el);\n    }\n  }\n);"],"sourceRoot":""}